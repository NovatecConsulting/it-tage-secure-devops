services:
  sonarqube:
    image: sonarqube:25.6.0.109173-community
    #hostname: sonarqube
    #container_name: sonarqube
    read_only: true
    depends_on:
      db:
        condition: service_healthy
      init:
        condition: service_completed_successfully
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
      SONAR_WEB_HOST: 0.0.0.0
      SONAR_WEB_PORT: 8085
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    ports:
      - "8085:8085"
  #  networks:
  #    - ${NETWORK_TYPE:-ipv4}
  db:
    image: postgres:17
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    hostname: postgresql
    container_name: postgresql
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
 #   networks:
 #     - ${NETWORK_TYPE:-ipv4}
  init:
    image: bash
    privileged: true
    user: root
    volumes:
      - /Users/andreas.falk/Development/localgit/it-tage-secure-devops/1_security/2_praxis/security-testing-demos/sonarqube/init.sh:/mnt/init.sh
    command: ["sh", "-e", "/mnt/init.sh"]

volumes:
  sonarqube_data:
  sonarqube_temp:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data:

#networks:
#  ipv4:
#    driver: bridge
#    enable_ipv6: false
#  dual:
#    driver: bridge
#    enable_ipv6: true
#    ipam:
#      config:
#        - subnet: "192.168.2.0/24"
#          gateway: "192.168.2.1"
#        - subnet: "2001:db8:2::/64"
#          gateway: "2001:db8:2::1"